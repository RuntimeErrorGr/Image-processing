Initial am citit denumirea/calea pentru fiecare resursa pusa la dispozitie in
fisierul text input.txt si am implementat o structura de tip pixel ce contine
3 atribute: red, green, blue.

Task 1: 
	Am deschis fisierul binar ce contine imaginea si am citit pe rand informatiile
din cele 2 headere si matricea de pixeli. Pentru a putea citi matricea de pixeli
a fost nevoie sa aflu dimensiunea paddingului adaugat la finalul fiecarui rand
cu ajutorul functiei @getPadding: 
Primeste ca parametru latimea imaginii. Pentru a calcula dimensiunea unei linii
in bytes, fara padding, se multiplica latimea cu 3 deoarece fiecare pixel are
3 culori a cate 1 byte fiecare. Acest padding trebuie evitat asa ca la finalul
fiecarui rand de pixeli cursorul se repozitioneaza pe randul urmator, sarind
peste atatia octeti cati indica paddingul.
	Pentru transformarea propriu-zisa a pixelilor am implementat functia 
@goBlackWhite care parcurge matricea de pixeli si inlocuieste fiecare culoare
a fiecarui pixel cu valoarea obtinuta prin aplicarea formulei specificate in 
enunt. Pixelii modificati in alb-negru au fost pusi intr-o noua matrice. 
	Pentru afisarea imaginii alb-negru am deschis un nou fisier binar al carui 
nume a fost obtinut pe baza numelui fisierului binar ce continea imaginea initiala.  	
Funtia @getOutputImageName primeste ca argumente numele fisierului initial si 
extensia ce trebuie adaugata. Se face o copie a numelui pentru a nu-l altera 
si se desparte copia in 2 tokens <nume> si <bmp> despartiti de caracterul ".". 
Se concateneaza apoi cei 2 tokeni introducand intre ei extensia specificata in 
enunt. Functia aceasta a fost folosita pentru obtinerea numelor imaginilor de 
output si la celelalte taskuri.
In fisierul binar deschis pentru scriere se introduc cele 2 headere urmate de 
matricea de pixeli alb-negru.

Task 2:
	Dupa deschiderea respectiv generarea fisierelor necesare de input/output,
pentru implementarea acestui task am folosit o succesiune de if/else
statements. Inainte de a intra in structurile decizionale am scris fileheaderul
in fisierul de output deoarece acesta nu se modifica indiferent de situatie. 
Apoi am tratat pe rand situatiile in care valoare inaltimii imaginii este mai mare 
decat valoarea latimii imaginii, latimea imaginii este mai mare decat inaltimea
si situatia in care cele 2 valori sunt egale.
Pentru situatia in care inaltimea este mai mare decat latimea: 
Latimea este actualizata cu valoarea inaltimii pentru ca cele 2 sa fie egale.
Este citita matricea de pixeli initiala si este calculata diferenta dintre 
inaltime si latimea initiala. Aceasta diferenta este utila pentru a sti cate
randuri de pixeli albi trebuie adaugate deasupra si cate randuri trebuie adaugate 
sub matricea initiala de pixeli. 
	In fisierul binar de output este pus infoheaderul actualizat cu valoarea
noii latimi apoi este completata noua matrice de pixeli cu portiunile albe 
corespunzatoare.
Pentru situatia in care latimea este mai mare decat inaltimea:
Este citita matricea de pixeli initiala si este calculata diferenta dintre 
latime si inaltimea initiala. Procedeul de scriere este similar cu cel de mai
sus, doar ca acum trebuie completate portiuni albe pe verticala. 
De asemenea in cadrul fiecarui caz de mai sus exista 2 posibilitati care au fost
tratate separat: atunci cand diferenta dintre cele 2 dimensiuni este para si
atunci cand diferenta este impara.
Pentru situatia in care latimea si inaltimea sunt egale: 
In cele 2 headere nu trebuie efectuata nicio modificare. In matricea de pixeli nu 
trebuie adaugate portiuni de pixeli albi asa ca imaginea este copiata pixel
cu pixel din fisierul de input in cel de output. 

Task 3:
Dupa deschiderea respectiv generarea fisierelor necesare de input/output am 
citit matricea de pixeli rasturnata si dimensiunea si elementele filtrului.
Pentru aplicarea filtrului am parcurs matricea de pixeli initiala cu ajutorul
a 2 bucle for si pentru fiecare pixel in parte am parcurs minimatricea centrata
in pixelul curent cu ajutorul a inca 2 bucle. Deoarece pixelii pot avea vecini
a caror indexare depaseste limitele permise de inaltimea si latimea imaginii 
initiale, la calculul sumelor acestia vor fi ignorati. 
Dupa ce este calculata suma corespunzatoare fiecarui culori a pixelului curent
valoare este verificata daca depaseste valorile extreme ce pot fi retinute 
inr-o variabila de tip unsigned char si apoi valoarea fiecarei culori in parte
este atribuita unui pixel corespondend cu aceeasi indexare i, j dintr-o noua 
matrice de pixeli.
Cele 2 hedere sunt scrise in fisierul de output, urmate de noua matricea de pixeli.



